authentik:
  secret_key: file:///authentik-secrets/authentik-secret-key
  postgresql:
    user: file:///postgresql-secrets/username
    password: file:///postgresql-secrets/password

postgresql:
  enabled: true
  auth:
    existingSecret: postgresql-secrets

redis:
  enabled: true

server:
  initContainers:
  - name: bootstrap-superuser
    image: ghcr.io/goauthentik/server:latest
    imagePullPolicy: IfNotPresent
    command:
      - /bin/sh
      - -c
      - |
        /bin/bash -c "
        if ! /bin/bash -c 'echo \"from authentik.core.models import User; print(User.objects.filter(username=\\\"admin\\\").exists())\" | python3 /app/authentik/manage.py shell' | grep -q True; then
          authentik bootstrap-superuser --username admin --email ${ADMIN_EMAIL} --password ${BOOTSTRAP_PASSWORD};
        fi
        "
    env:
    - name: ADMIN_EMAIL
      valueFrom:
        secretKeyRef:
          name: authentik-secrets
          key: admin-email
    - name: BOOTSTRAP_PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-secrets
          key: admin-password
  volumes:
  - name: authentik-secrets
    secret:
      secretName: authentik-secrets
  - name: postgresql-secrets
    secret:
      secretName: postgresql-secrets
  volumeMounts:
  - name: authentik-secrets
    mountPath: /authentik-secrets
    readOnly: true
  - name: postgresql-secrets
    mountPath: /postgresql-secrets
    readOnly: true
  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts:
    - authentik.${DOMAIN}

worker:
  volumes:
  - name: authentik-secrets
    secret:
      secretName: authentik-secrets
  - name: postgresql-secrets
    secret:
      secretName: postgresql-secrets
  volumeMounts:
  - name: authentik-secrets
    mountPath: /authentik-secrets
    readOnly: true
  - name: postgresql-secrets
    mountPath: /postgresql-secrets
    readOnly: true
